{"version":3,"sources":["api/unsplash.js","comps/ImageCard.js","comps/ImageList.js","comps/SearchBar.js","comps/App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","ImageCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","setState","state","React","createRef","addEventListener","_this$props$image","image","description","urls","react_default","a","createElement","style","gridRowEnd","concat","href","regular","target","rel","className","src","small","alt","ref","Component","ImageList","images","map","comps_ImageCard","key","id","SearchBar","term","placeholder","onFormSubmit","e","preventDefault","onSubmit","length","t","charAt","toUpperCase","slice","marginLeft","_this2","type","value","onChange","funny","App","onSearchSubmit","_callee","response","regenerator_default","wrap","_context","prev","next","unsplash","get","params","query","per_page","sent","data","results","stop","marginTop","comps_SearchBar","src_comps_ImageList","Boolean","window","location","hostname","match","ReactDOM","render","comps_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c68a3f8.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://api.unsplash.com',\n    headers: {\n        Authorization: 'Client-ID d3f7324bba4520fdb883f93c60e9c3ca6ab52d0d4da9768249ab61039739e10c'\n    }\n});","import React, {Component} from 'react';\n\nclass ImageCard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { spans: 0 };\n\n        this.imageRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.imageRef.current.addEventListener('load', this.setSpans);\n\n    }\n\n    setSpans = () => {\n        const height = this.imageRef.current.clientHeight;\n\n        const spans = Math.ceil(height / 10);\n\n        this.setState({ spans });\n    };\n\n    render() {\n\n        const { description, urls } = this.props.image;\n\n        return (\n            <div style={{ gridRowEnd: `span ${this.state.spans}`}}>\n                <a href={urls.regular} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img\n                        className=\"ui medium rounded image\"\n                        src={urls.small}\n                        alt={description}\n                        ref={this.imageRef}\n                    />\n                </a>\n            </div>\n        );\n    }\n}\n\nexport default ImageCard;","import React, {Component} from 'react';\nimport './ImageList.css';\nimport ImageCard from \"./ImageCard\";\n\nclass ImageList extends Component {\n\n    render() {\n\n        const images = this.props.images.map(image => {\n            return <ImageCard key={image.id} image={image} />\n        });\n\n        return (\n            <div className=\"image-list\">\n                {images}\n\n            </div>\n        );\n    }\n\n}\n\nexport default ImageList;","import React, {Component} from 'react';\n\nclass SearchBar extends Component {\n\n    state = {\n        term: '',\n        placeholder: 'Type a search term ...'\n    };\n\n    onFormSubmit = (e) => {\n        e.preventDefault();\n        this.props.onSubmit(this.state.term);\n    };\n\n    funny() {\n        if(this.state.term.length !== 0) {\n            const t = this.state.term.charAt(0).toUpperCase() + this.state.term.slice(1);\n            return <span style={{marginLeft: 5}}>You're searching for: <span style={{marginLeft: 5}} className=\"ui label violet\">{t}</span></span>\n        }\n    }\n\n    render() {\n        const t = this.state.term.charAt(0).toUpperCase() + this.state.term.slice(1);\n\n        return (\n            <div className=\"ui segment\">\n                <form onSubmit={this.onFormSubmit} className=\"ui form\">\n                    <div className=\"field\">\n                        <label>Image Search</label>\n                        <input\n                            className=\"inline\"\n                            placeholder={this.state.placeholder}\n                            type=\"text\"\n                            value={t}\n                            onChange={(e) => this.setState({term: e.target.value})}\n                        />\n\n                    </div>\n                    <button type=\"submit\" className=\"ui submit button inline\">Submit</button>\n                    {this.funny()}\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport unsplash from '../api/unsplash';\nimport ImageList from \"./ImageList\";\nimport SearchBar from \"./SearchBar\";\n\nclass App extends Component {\n\n  state = {\n      images: []\n  };\n\n  onSearchSubmit = async (term) => {\n    const response = await unsplash.get('/search/photos', {\n        params: {\n            query: term,\n            per_page: 25\n        }\n    });\n\n    this.setState({\n        images: response.data.results\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\" style={{marginTop: '10px'}}>\n        <SearchBar onSubmit={this.onSearchSubmit}/>\n        <ImageList images={this.state.images}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './comps/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}